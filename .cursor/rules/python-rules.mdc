---
description: Rules to follow when writing Python
globs: *.py
alwaysApply: false
---
# Python Language Guidelines
- Follow PEP 8 Standards: Adhere to PEP 8 style guidelines using formatters like Black and isort for consistency.
- Use Virtual Environments: Maintain isolated development environments with clear dependency files (e.g., requirements.txt or pyproject.toml).
- Utilize Type Hints: Incorporate type annotations and leverage tools like mypy for static type checking.
Employ Context Managers: Use context managers to handle resources efficiently, ensuring proper cleanup.
- Apply Appropriate Design Patterns: Utilize design patterns (factories, repositories, services) and prefer composition over inheritance when designing class hierarchies.
- Utilize Data Validation Tools: Use dataclasses or Pydantic models to enforce data validation and create clear data representations.
- Integrate Linters and CI Tools: Consider using linters like flake8 in your CI/CD pipeline to enforce code quality.
- Enhance Logging and Exception Handling: Strengthen logging and exception handling for improved debugging and transparency.
- Adopt Comprehensive Testing Strategies: Establish robust testing processes that include unit, integration, and end-to-end tests to ensure code reliability.